capecPattern[0].attackID = 199
capecPattern[0].attackTitle = Cross-Site Scripting Using Alternate Syntax 
capecPattern[0].attackSummary = The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the "script" tag using the alternate forms of "Script" or "ScRiPt" may bypass filters where "script" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.
capecPattern[0].attackLikelihood = High
capecPattern[0].attackSeverity = High
capecPattern[0].attackSource = Internal_CAPEC_Team
capecPattern[0].Submitter = CAPEC Content Team
capecPattern[0].attackSubmitterOrg = The MITRE Corporation
capecPattern[0].changeSummary = 
capecPattern[0].attackSubmTimeStamp = 
capecPattern[0].attackModifier = 
capecPattern[0].attackModSource = 
capecPattern[0].attackModifierOrg = 
capecPattern[0].attackModTimeStamp = 

capecPattern[1].attackID = 245
capecPattern[1].attackTitle = Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript
capecPattern[1].attackSummary = The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the &lt; before a script command, (&lt;&lt;script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.
capecPattern[1].attackLikelihood = 
capecPattern[1].attackSeverity = Medium
capecPattern[1].attackSource = Internal_CAPEC_Team
capecPattern[1].Submitter = CAPEC Content Team
capecPattern[1].attackSubmitterOrg = The MITRE Corporation
capecPattern[1].changeSummary = 
capecPattern[1].attackSubmTimeStamp = 
capecPattern[1].attackModifier = 
capecPattern[1].attackModSource = 
capecPattern[1].attackModifierOrg = 
capecPattern[1].attackModTimeStamp =

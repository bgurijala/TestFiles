capecPattern[0].attackID = 198
capecPattern[0].attackTitle = Cross-Site Scripting in Error Pages
capecPattern[0].attackSummary = An attacker distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.
capecPattern[0].attackLikelihood = 
capecPattern[0].attackSeverity = Medium
capecPattern[0].attackSource = Internal_CAPEC_Team
capecPattern[0].Submitter = CAPEC Content Team
capecPattern[0].attackSubmitterOrg = The MITRE Corporation
capecPattern[0].changeSummary = 
capecPattern[0].attackSubmTimeStamp = 2014-06-23
capecPattern[0].attackModifier = 
capecPattern[0].attackModSource = 
capecPattern[0].attackModifierOrg = 
capecPattern[0].attackModTimeStamp = 

capecPattern[1].attackID = 199
capecPattern[1].attackTitle = Cross-Site Scripting Using Alternate Syntax 
capecPattern[1].attackSummary = The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the "script" tag using the alternate forms of "Script" or "ScRiPt" may bypass filters where "script" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.
capecPattern[1].attackLikelihood = High
capecPattern[1].attackSeverity = High
capecPattern[1].attackSource = Internal_CAPEC_Team
capecPattern[1].Submitter = CAPEC Content Team
capecPattern[1].attackSubmitterOrg = The MITRE Corporation
capecPattern[1].changeSummary = 
capecPattern[1].attackSubmTimeStamp = 2014-06-23
capecPattern[1].attackModifier = 
capecPattern[1].attackModSource = 
capecPattern[1].attackModifierOrg = 
capecPattern[1].attackModTimeStamp = 

capecPattern[2].attackID = 245
capecPattern[2].attackTitle = Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript
capecPattern[2].attackSummary = The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the 
capecPattern[2].attackLikelihood = 
capecPattern[2].attackSeverity = Medium
capecPattern[2].attackSource = Internal_CAPEC_Team
capecPattern[2].Submitter = CAPEC Content Team
capecPattern[2].attackSubmitterOrg = The MITRE Corporation
capecPattern[2].changeSummary = 
capecPattern[2].attackSubmTimeStamp = 2014-06-23
capecPattern[2].attackModifier = 
capecPattern[2].attackModSource = 
capecPattern[2].attackModifierOrg = 
capecPattern[2].attackModTimeStamp = 

capecPattern[3].attackID = 246
capecPattern[3].attackTitle = Cross-Site Scripting Using Flash
capecPattern[3].attackSummary = An attacker injects malicious script to global parameters in a Flash movie via a crafted URL. The malicious script is executed in the context of the Flash movie. As such, this is a form of Cross-Site Scripting (XSS), but the abilities granted to the Flash movie make this attack more flexible.
capecPattern[3].attackLikelihood = 
capecPattern[3].attackSeverity = 
capecPattern[3].attackSource = Internal_CAPEC_Team
capecPattern[3].Submitter = CAPEC Content Team
capecPattern[3].attackSubmitterOrg = The MITRE Corporation
capecPattern[3].changeSummary = 
capecPattern[3].attackSubmTimeStamp = 2014-06-23
capecPattern[3].attackModifier = 
capecPattern[3].attackModSource = 
capecPattern[3].attackModifierOrg = 
capecPattern[3].attackModTimeStamp = 

capecPattern[4].attackID = 247
capecPattern[4].attackTitle = Cross-Site Scripting with Masking through Invalid Characters in Identifiers
capecPattern[4].attackSummary = The attacker inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.
capecPattern[4].attackLikelihood = 
capecPattern[4].attackSeverity = Medium
capecPattern[4].attackSource = Internal_CAPEC_Team
capecPattern[4].Submitter = CAPEC Content Team
capecPattern[4].attackSubmitterOrg = The MITRE Corporation
capecPattern[4].changeSummary = 
capecPattern[4].attackSubmTimeStamp = 2014-06-23
capecPattern[4].attackModifier = 
capecPattern[4].attackModSource = 
capecPattern[4].attackModifierOrg = 
capecPattern[4].attackModTimeStamp = 
